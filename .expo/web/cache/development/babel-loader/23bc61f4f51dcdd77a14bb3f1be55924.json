{
  "ast": null,
  "code": "import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { PureComponent } from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nvar _Dimensions$get = Dimensions.get('window'),\n    width = _Dimensions$get.width;\n\nvar baseStyle = {\n  backgroundColor: 'transparent'\n};\n\nvar AutoSizedImage = function (_PureComponent) {\n  _inherits(AutoSizedImage, _PureComponent);\n\n  var _super = _createSuper(AutoSizedImage);\n\n  function AutoSizedImage(props) {\n    var _this;\n\n    _classCallCheck(this, AutoSizedImage);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      width: _this.props.style.width || 1,\n      height: _this.props.style.height || 1\n    };\n    return _this;\n  }\n\n  _createClass(AutoSizedImage, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      if (this.props.style.width || this.props.style.height) {\n        return;\n      }\n\n      Image.getSize(this.props.source.uri, function (w, h) {\n        _this2.setState({\n          width: w,\n          height: h\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var finalSize = {};\n\n      if (this.state.width > width) {\n        finalSize.width = width;\n        var ratio = width / this.state.width;\n        finalSize.height = this.state.height * ratio;\n      }\n\n      var style = _extends(baseStyle, this.props.style, this.state, finalSize);\n\n      var source = {};\n\n      if (!finalSize.width || !finalSize.height) {\n        source = _extends(source, this.props.source, this.state);\n      } else {\n        source = _extends(source, this.props.source, finalSize);\n      }\n\n      return _jsx(Image, {\n        style: style,\n        source: source\n      });\n    }\n  }]);\n\n  return AutoSizedImage;\n}(PureComponent);\n\nexport { AutoSizedImage as default };",
  "map": {
    "version": 3,
    "sources": [
      "/Users/numa.maurin/Documents/TeadsSDK-ReactNative/node_modules/react-native-htmlview/AutoSizedImage.js"
    ],
    "names": [
      "React",
      "PureComponent",
      "Dimensions",
      "get",
      "width",
      "baseStyle",
      "backgroundColor",
      "AutoSizedImage",
      "props",
      "state",
      "style",
      "height",
      "Image",
      "getSize",
      "source",
      "uri",
      "w",
      "h",
      "setState",
      "finalSize",
      "ratio"
    ],
    "mappings": ";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAeC,aAAf,QAAmC,OAAnC;;;;;AAMA,sBAAgBC,UAAU,CAACC,GAAX,CAAe,QAAf,CAAhB;AAAA,IAAOC,KAAP,mBAAOA,KAAP;;AAEA,IAAMC,SAAS,GAAG;AAChBC,EAAAA,eAAe,EAAE;AADD,CAAlB;;IAIqBC,c;;;;;AACnB,0BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AAGXL,MAAAA,KAAK,EAAE,MAAKI,KAAL,CAAWE,KAAX,CAAiBN,KAAjB,IAA0B,CAHtB;AAIXO,MAAAA,MAAM,EAAE,MAAKH,KAAL,CAAWE,KAAX,CAAiBC,MAAjB,IAA2B;AAJxB,KAAb;AAFiB;AAQlB;;;;WAED,6BAAoB;AAAA;;AAElB,UAAI,KAAKH,KAAL,CAAWE,KAAX,CAAiBN,KAAjB,IAA0B,KAAKI,KAAL,CAAWE,KAAX,CAAiBC,MAA/C,EAAuD;AACrD;AACD;;AACDC,MAAAA,KAAK,CAACC,OAAN,CAAc,KAAKL,KAAL,CAAWM,MAAX,CAAkBC,GAAhC,EAAqC,UAACC,CAAD,EAAIC,CAAJ,EAAU;AAC7C,QAAA,MAAI,CAACC,QAAL,CAAc;AAACd,UAAAA,KAAK,EAAEY,CAAR;AAAWL,UAAAA,MAAM,EAAEM;AAAnB,SAAd;AACD,OAFD;AAGD;;;WAED,kBAAS;AACP,UAAME,SAAS,GAAG,EAAlB;;AACA,UAAI,KAAKV,KAAL,CAAWL,KAAX,GAAmBA,KAAvB,EAA8B;AAC5Be,QAAAA,SAAS,CAACf,KAAV,GAAkBA,KAAlB;AACA,YAAMgB,KAAK,GAAGhB,KAAK,GAAG,KAAKK,KAAL,CAAWL,KAAjC;AACAe,QAAAA,SAAS,CAACR,MAAV,GAAmB,KAAKF,KAAL,CAAWE,MAAX,GAAoBS,KAAvC;AACD;;AACD,UAAMV,KAAK,GAAG,SACZL,SADY,EAEZ,KAAKG,KAAL,CAAWE,KAFC,EAGZ,KAAKD,KAHO,EAIZU,SAJY,CAAd;;AAMA,UAAIL,MAAM,GAAG,EAAb;;AACA,UAAI,CAACK,SAAS,CAACf,KAAX,IAAoB,CAACe,SAAS,CAACR,MAAnC,EAA2C;AACzCG,QAAAA,MAAM,GAAG,SAAcA,MAAd,EAAsB,KAAKN,KAAL,CAAWM,MAAjC,EAAyC,KAAKL,KAA9C,CAAT;AACD,OAFD,MAEO;AACLK,QAAAA,MAAM,GAAG,SAAcA,MAAd,EAAsB,KAAKN,KAAL,CAAWM,MAAjC,EAAyCK,SAAzC,CAAT;AACD;;AAED,aAAO,KAAC,KAAD;AAAO,QAAA,KAAK,EAAET,KAAd;AAAqB,QAAA,MAAM,EAAEI;AAA7B,QAAP;AACD;;;;EA1CyCb,a;;SAAvBM,c",
    "sourcesContent": [
      "import React, {PureComponent} from 'react';\nimport {\n  Image,\n  Dimensions,\n} from 'react-native';\n\nconst {width} = Dimensions.get('window');\n\nconst baseStyle = {\n  backgroundColor: 'transparent',\n};\n\nexport default class AutoSizedImage extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // set width 1 is for preventing the warning\n      // You must specify a width and height for the image %s\n      width: this.props.style.width || 1,\n      height: this.props.style.height || 1,\n    };\n  }\n\n  componentDidMount() {\n    //avoid repaint if width/height is given\n    if (this.props.style.width || this.props.style.height) {\n      return;\n    }\n    Image.getSize(this.props.source.uri, (w, h) => {\n      this.setState({width: w, height: h});\n    });\n  }\n\n  render() {\n    const finalSize = {};\n    if (this.state.width > width) {\n      finalSize.width = width;\n      const ratio = width / this.state.width;\n      finalSize.height = this.state.height * ratio;\n    }\n    const style = Object.assign(\n      baseStyle,\n      this.props.style,\n      this.state,\n      finalSize\n    );\n    let source = {};\n    if (!finalSize.width || !finalSize.height) {\n      source = Object.assign(source, this.props.source, this.state);\n    } else {\n      source = Object.assign(source, this.props.source, finalSize);\n    }\n\n    return <Image style={style} source={source} />;\n  }\n}\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
